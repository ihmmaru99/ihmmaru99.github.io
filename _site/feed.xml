<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-08-02T11:50:38+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">IhmMaru99의 잡동사니</title><subtitle>ihmmaru99&apos;s blog</subtitle><author><name>임정빈</name></author><entry><title type="html">[자율주행SW경진대회] 자율주행차 하드웨어 제작 (1)</title><link href="http://localhost:4000/autocarsw/1/" rel="alternate" type="text/html" title="[자율주행SW경진대회] 자율주행차 하드웨어 제작 (1)" /><published>2023-07-24T00:00:00+09:00</published><updated>2023-08-02T00:00:00+09:00</updated><id>http://localhost:4000/autocarsw/1</id><content type="html" xml:base="http://localhost:4000/autocarsw/1/"><![CDATA[<h1 id="모터-제어">모터 제어</h1>
<p>대회는 다음과 같은 형태의 유아용 전동차를 활용해서 대회가 진행된다.
<img src="https://github.com/ihmmaru99/BOJ/assets/109266664/57dd3504-5d2b-4e26-aed4-b7a48ddfb56c" alt="2d10e3ddaa0feac409a29efa284c3515" width="400px&quot;, height=&quot;100px" /><br />
해당 차량은 뒷바퀴에 두개의 모터가 연결되어 있다. 뒷바퀴는 차량의 구동을 위한 구동 모터로 사용할 예정이며 앞에는 모터가 하나 연결되어 있으며 이는 모터를 이용한 차량의 조향을 위해 사용할 계획이다</p>]]></content><author><name>임정빈</name></author><category term="AutoCarSW" /><category term="HW" /><category term="Motor" /><summary type="html"><![CDATA[모터 제어 대회는 다음과 같은 형태의 유아용 전동차를 활용해서 대회가 진행된다. 해당 차량은 뒷바퀴에 두개의 모터가 연결되어 있다. 뒷바퀴는 차량의 구동을 위한 구동 모터로 사용할 예정이며 앞에는 모터가 하나 연결되어 있으며 이는 모터를 이용한 차량의 조향을 위해 사용할 계획이다]]></summary></entry><entry><title type="html">[백준][5014] 스타트링크</title><link href="http://localhost:4000/boj/5014/" rel="alternate" type="text/html" title="[백준][5014] 스타트링크" /><published>2023-06-13T00:00:00+09:00</published><updated>2023-06-13T00:00:00+09:00</updated><id>http://localhost:4000/boj/5014</id><content type="html" xml:base="http://localhost:4000/boj/5014/"><![CDATA[<h1 id="스타트링크">스타트링크</h1>

<h2 id="난이도">난이도</h2>
<blockquote>
  <p><img src="https://github.com/ihmmaru99/ihmmaru99.github.io/assets/109266664/1725e8ac-be34-44d1-a4db-174d0a2cd0dd" alt="10" width="20px&quot;, height=&quot;20px" /> <span style="color:#585858"> 실버 1</span></p>
</blockquote>

<h2 id="문제">문제</h2>
<p>강호는 코딩 교육을 하는 스타트업 스타트링크에 지원했다. 오늘은 강호의 면접날이다. 하지만, 늦잠을 잔 강호는 스타트링크가 있는 건물에 늦게 도착하고 말았다.</p>

<p>스타트링크는 총 F층으로 이루어진 고층 건물에 사무실이 있고, 스타트링크가 있는 곳의 위치는 G층이다. 강호가 지금 있는 곳은 S층이고, 이제 엘리베이터를 타고 G층으로 이동하려고 한다.</p>

<p>보통 엘리베이터에는 어떤 층으로 이동할 수 있는 버튼이 있지만, 강호가 탄 엘리베이터는 버튼이 2개밖에 없다. U버튼은 위로 U층을 가는 버튼, D버튼은 아래로 D층을 가는 버튼이다. (만약, U층 위, 또는 D층 아래에 해당하는 층이 없을 때는, 엘리베이터는 움직이지 않는다)</p>

<p>강호가 G층에 도착하려면, 버튼을 적어도 몇 번 눌러야 하는지 구하는 프로그램을 작성하시오. 만약, 엘리베이터를 이용해서 G층에 갈 수 없다면, “use the stairs”를 출력한다.</p>
<h2 id="입력">입력</h2>
<p>첫째 줄에 F, S, G, U, D가 주어진다. (1 ≤ S, G ≤ F ≤ 1000000, 0 ≤ U, D ≤ 1000000) 건물은 1층부터 시작하고, 가장 높은 층은 F층이다.</p>

<h2 id="출력">출력</h2>
<p>첫째 줄에 강호가 S층에서 G층으로 가기 위해 눌러야 하는 버튼의 수의 최솟값을 출력한다. 만약, 엘리베이터로 이동할 수 없을 때는 “use the stairs”를 출력한다.</p>

<h2 id="풀이">풀이</h2>
<blockquote>
  <p>BFS를 통해서 원하는 층으로 가는 최단 횟수를 찾아내는 방법을 구현하면 된다. 입력받은 엘리베이터의 이동할 수 있는 방법을 이용해서 BFS를 횟수를 저장하고 출력하면 된다.</p>
</blockquote>

<h2 id="결과">결과</h2>
<p><a href="https://github.com/ihmmaru99/BOJ/blob/main/5014/5014.cpp">5014 - 스타트링크</a></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
</span>
<span class="cp"># define MAX 1000001
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">F</span><span class="p">,</span> <span class="n">S</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">U</span><span class="p">,</span> <span class="n">D</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
<span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">stage</span><span class="p">[</span><span class="n">MAX</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="p">};</span>
<span class="kt">bool</span> <span class="n">visited</span><span class="p">[</span><span class="n">MAX</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="nb">false</span><span class="p">,</span> <span class="p">};</span>

<span class="kt">void</span> <span class="nf">bfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
    <span class="n">visited</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="n">nx</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">nx</span> <span class="o">&lt;=</span><span class="n">F</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">visited</span><span class="p">[</span><span class="n">nx</span><span class="p">]){</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">nx</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">nx</span><span class="p">);</span>
                <span class="n">stage</span><span class="p">[</span><span class="n">nx</span><span class="p">]</span> <span class="o">=</span> <span class="n">stage</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">F</span> <span class="o">&gt;&gt;</span> <span class="n">S</span> <span class="o">&gt;&gt;</span> <span class="n">G</span> <span class="o">&gt;&gt;</span> <span class="n">U</span> <span class="o">&gt;&gt;</span> <span class="n">D</span><span class="p">;</span>
    <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">U</span><span class="p">);</span>
    <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">D</span><span class="p">);</span>

    <span class="n">bfs</span><span class="p">(</span><span class="n">S</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">G</span><span class="p">])</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">stage</span><span class="p">[</span><span class="n">G</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"use the stairs"</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="채점-결과">채점 결과</h2>
<p><img width="730" alt="스크린샷 2023-06-13 11 12 25" src="https://github.com/ihmmaru99/BOJ/assets/109266664/c351b656-548b-4fb6-9a76-183c0e2bf899" /></p>]]></content><author><name>임정빈</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BFS" /><category term="C++" /><summary type="html"><![CDATA[스타트링크]]></summary></entry><entry><title type="html">[백준][9663] N-Queen</title><link href="http://localhost:4000/boj/9663/" rel="alternate" type="text/html" title="[백준][9663] N-Queen" /><published>2023-06-12T00:00:00+09:00</published><updated>2023-06-12T00:00:00+09:00</updated><id>http://localhost:4000/boj/9663</id><content type="html" xml:base="http://localhost:4000/boj/9663/"><![CDATA[<h1 id="n-queen">N-Queen</h1>
<h2 id="난이도">난이도</h2>
<blockquote>
  <p><img src="https://github.com/ihmmaru99/ihmmaru99/assets/109266664/4f74cb65-a628-44e0-8f7f-210cdc98eb6e" alt="12" width="20px&quot;, height=&quot;20px" /> <span style="color:#FFBF00"> 골드 4</span></p>
</blockquote>

<h2 id="문제">문제</h2>
<p>N-Queen 문제는 크기가 N × N인 체스판 위에 퀸 N개를 서로 공격할 수 없게 놓는 문제이다.</p>

<p>N이 주어졌을 때, 퀸을 놓는 방법의 수를 구하는 프로그램을 작성하시오.</p>
<h2 id="입력">입력</h2>
<p>첫째 줄에 N이 주어진다. (1 ≤ N &lt; 15)</p>
<h2 id="출력">출력</h2>
<p>첫째 줄에 퀸 N개를 서로 공격할 수 없게 놓는 경우의 수를 출력한다.</p>
<h2 id="풀이">풀이</h2>
<blockquote>
  <p>백트래킹의 대표적인 문제이다. 가능한 경우의 수를 찾아서 1차원 배열 안에서 각 행에 위치한 퀸의 위치를 넣어서 가능한 경우의 수를 확인한다. NxN 판에서 N개의 퀸을 놓아야 하기 때문에 한 줄에 하나씩 퀸이 위치할 수 있어야 한다. 그렇기 때문에 모든 줄에는 퀸이 위치해야 하고 만약 모든 줄에 퀸이 위치할 수 없다면 그 경우는 해당 퀸을 위치시킬 수 없는 것이다. 이를 통해서 행과 열, 대각선을 검사해서 퀸을 모든 행에 위치시킬 수 있는지 확인한다. 같은 행을 검사할 필요없이 한 행에 값을 한개 넣을 수 있으므로 하나를 위치시켰다면 한 행은 넘어간다. 열 검사는 배열안에서 같은 값을 가지면 같은 열에 위치한 것이므로 이렇게 되면 위치시킬 수 없도록 한다. 대각선은 입력받은 값과 원래 기록되어있는 값의 인덱스 값을 비교해서 확인한다. 이렇게 검사해서 만약 놓을 수 있다면 다음 행으로 넘어가서 놓는 과정을 반복한다.</p>
</blockquote>

<h2 id="결과">결과</h2>
<p><a href="https://github.com/ihmmaru99/BOJ/blob/main/9663/9663.cpp">9663 - N-Queen</a></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="cp"># define MAX 15
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">col</span><span class="p">[</span><span class="n">MAX</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">check</span><span class="p">(</span><span class="kt">int</span> <span class="n">level</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">level</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">col</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">col</span><span class="p">[</span><span class="n">level</span><span class="p">]</span> <span class="o">||</span> <span class="n">abs</span><span class="p">(</span><span class="n">col</span><span class="p">[</span><span class="n">level</span><span class="p">]</span> <span class="o">-</span> <span class="n">col</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="n">level</span> <span class="o">-</span> <span class="n">i</span><span class="p">)</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">nqueen</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">n</span><span class="p">)</span>
        <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
    <span class="k">else</span><span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="n">col</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">check</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
                <span class="n">nqueen</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">nqueen</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">cnt</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="채점-결과">채점 결과</h1>
<p><img width="730" alt="스크린샷 2023-06-13 11 22 44" src="https://github.com/ihmmaru99/BOJ/assets/109266664/88fbf192-5d3d-4bb7-86f4-abd450bb9aa3" /></p>]]></content><author><name>임정빈</name></author><category term="BOJ" /><category term="Algorithm" /><category term="Backtracking" /><category term="C++" /><summary type="html"><![CDATA[N-Queen 난이도 골드 4]]></summary></entry><entry><title type="html">[백준][3015] 오아시스 재결합 (작성 중)</title><link href="http://localhost:4000/boj/3015/" rel="alternate" type="text/html" title="[백준][3015] 오아시스 재결합 (작성 중)" /><published>2023-06-12T00:00:00+09:00</published><updated>2023-06-12T00:00:00+09:00</updated><id>http://localhost:4000/boj/3015</id><content type="html" xml:base="http://localhost:4000/boj/3015/"><![CDATA[<h1 id="오아시스-재결합">오아시스 재결합</h1>
<h2 id="난이도">난이도</h2>
<blockquote>
  <p><img src="https://github.com/ihmmaru99/ihmmaru99/assets/109266664/b0b9d8fa-6e70-4649-a19c-41023d019dee" alt="16" width="20px&quot;, height=&quot;20px" /> <span style="color:#27E2A4"> 플래티넘 5</span></p>
</blockquote>

<h2 id="문제">문제</h2>
<p>오아시스의 재결합 공연에 N명이 한 줄로 서서 기다리고 있다.</p>

<p>이 역사적인 순간을 맞이하기 위해 줄에서서 기다리고 있던 백준이는 갑자기 자기가 볼 수 있는 사람의 수가 궁금해 졌다.</p>

<p>두 사람 A와 B가 서로 볼 수 있으려면, 두 사람 사이에 A 또는 B보다 키가 큰 사람이 없어야 한다.</p>

<p>줄에 서있는 사람의 키가 주어졌을 때, 서로 볼 수 있는 쌍의 수를 구하는 프로그램을 작성하시오.</p>

<h2 id="입력">입력</h2>
<p>첫째 줄에 줄에서 기다리고 있는 사람의 수 N이 주어진다. (1 ≤ N ≤ 500,000)</p>

<p>둘째 줄부터 N개의 줄에는 각 사람의 키가 나노미터 단위로 주어진다. 모든 사람의 키는 231 나노미터 보다 작다.</p>

<p>사람들이 서 있는 순서대로 입력이 주어진다.</p>

<h2 id="출력">출력</h2>
<p>서로 볼 수 있는 쌍의 수를 출력한다.</p>

<h2 id="풀이">풀이</h2>

<h2 id="결과">결과</h2>
<p><a href="https://github.com/ihmmaru99/BOJ/blob/main/3015/3015.cpp">3015 - 오아시스 재결합</a></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;stack&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">people_num</span><span class="p">;</span>
    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">people_num</span><span class="p">;</span>
    
    <span class="n">stack</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">st</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">now</span><span class="p">,</span><span class="n">cnt_same_height</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="kt">long</span> <span class="kt">long</span>  <span class="n">cnt_pair</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">people_num</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">now</span><span class="p">;</span>
        <span class="n">cnt_same_height</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
        
        <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">now</span><span class="p">){</span>
            <span class="n">cnt_pair</span> <span class="o">+=</span> <span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">second</span><span class="p">;</span>
            <span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="p">}</span>
        
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">first</span><span class="o">==</span> <span class="n">now</span><span class="p">){</span>
                <span class="n">cnt_pair</span> <span class="o">+=</span> <span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">second</span><span class="p">;</span>
                <span class="n">cnt_same_height</span> <span class="o">=</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">second</span> <span class="o">+</span><span class="mi">1</span><span class="p">);</span>
                
                <span class="k">if</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
                    <span class="n">cnt_pair</span><span class="o">++</span><span class="p">;</span>
                <span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="p">}</span><span class="k">else</span>
        <span class="n">cnt_pair</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">now</span><span class="p">,</span> <span class="n">cnt_same_height</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">cnt_pair</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
n = 7 입력
Now =2 처음에 st = (2 1) cnt_pair = 0
Now = 4, cnt_pair = 1, st = empty, st = (4 1)
Now = 1, while문 통과, cnt_pair = 2, st= (1 1) (4 1)
Now = 2, while문에서 (1 1) 빠지고 cnt_pair=3, cnt_pair=4, st=(2 1) (4 1)
Now = 2, if문에서 cnt_pair=5, cnt_same_height=2, cnt_pair=6, st = (4 1) st= (2 2) (4 1)
Now = 5, while문에서 (2 2) 빠지면서 cnt_pair=8, st =(4 1) 빠지고, cnt_pair=9, st = (5 1)
Now = 1, cnt_pair= 10, st = (1 1) (5 1)
*/</span>
</code></pre></div></div>

<h2 id="채점-결과">채점 결과</h2>
<p><img width="730" alt="스크린샷 2023-06-12 12 01 54" src="https://github.com/ihmmaru99/BOJ/assets/109266664/5fe52381-2d16-49cb-94c0-3e363dbb9989" /></p>]]></content><author><name>임정빈</name></author><category term="BOJ" /><category term="Algorithm" /><category term="C++" /><category term="Stack" /><summary type="html"><![CDATA[오아시스 재결합 난이도 플래티넘 5]]></summary></entry><entry><title type="html">[소프티어] 우물 안 개구리</title><link href="http://localhost:4000/softeer/%EC%9A%B0%EB%AC%BC%EC%95%88%EA%B0%9C%EA%B5%AC%EB%A6%AC/" rel="alternate" type="text/html" title="[소프티어] 우물 안 개구리" /><published>2023-06-12T00:00:00+09:00</published><updated>2023-06-12T00:00:00+09:00</updated><id>http://localhost:4000/softeer/%EC%9A%B0%EB%AC%BC%EC%95%88%EA%B0%9C%EA%B5%AC%EB%A6%AC</id><content type="html" xml:base="http://localhost:4000/softeer/%EC%9A%B0%EB%AC%BC%EC%95%88%EA%B0%9C%EA%B5%AC%EB%A6%AC/"><![CDATA[<h2 id="우물-안-개구리">우물 안 개구리</h2>

<h2 id="난이도">난이도</h2>
<blockquote>
  <p>level 3</p>
</blockquote>

<h2 id="문제">문제</h2>
<p>헬스장에서 N명의 회원이 운동을 하고 있다. 각 회원은 1에서 N사이의 번호가 부여되어 있고, i번 회원이 들 수 있는 역기의 무게는 Wi이다. 회원들 사이에는 M개의 친분관계 (Aj, Bj)가 있다. (Aj, Bj)는 Aj번 회원과 Bj번 회원이 친분 관계가 있다는 것을 의미한다. i번 회원은 자신과 친분 관계가 있는 다른 회원보다 들 수 있는 역기의 무게가 무거우면 자신이 최고라고 생각한다. 단, 누구와도 친분이 없는 멤버는 본인이 최고라고 생각한다.</p>

<p>이 헬스장에서 자신이 최고라고 생각하는 회원은 몇 명인가?</p>

<h2 id="제약조건">제약조건</h2>
<p>2 ≤ N ≤ \(10^5\)<br />
1 ≤ M ≤ \(10^5\)<br />
1 ≤ \(W_i\) ≤ \(10^9\)<br />
1 ≤ \(A_j\), \(B_j\) ≤ N<br />
\(A_j\) ≠ \(B_j\)<br /></p>

<h2 id="입력형식">입력형식</h2>
<p>첫 번째 줄에 두 정수 N, M이 주어진다.
두 번째 줄에 N개의 정수 W1, W2, … , WN 이 주어진다.
다음 M개의 줄의 j번째 줄에는 두 정수 Aj, Bj 가 주어진다.</p>

<h2 id="출력형식">출력형식</h2>
<p>첫 번째 줄에 자신이 최고라고 생각하는 회원 수를 출력한다.</p>

<h2 id="풀이">풀이</h2>
<blockquote>
  <p>처음에는 모두가 자신이 최고라고 생각하지만 주변에 친분관계가 생기면서 자신이 최고가 아니라고 생각하게 되는 것이다. 그렇기 때문에 친분 관계에서 자신이 최고가 아니라고 생각하게 되는 경우를 찾아서 빼가면서 기록하고 여전히 자신이 최고라고 생각하는 사람들의 수를 출력하면 된다.</p>
</blockquote>

<h2 id="결과">결과</h2>
<p><a href="https://github.com/ihmmaru99/Softeer/blob/main/우물안개구리/우물안개구리.cpp">우물 안 개구리</a></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">user</span><span class="p">[</span><span class="mi">100001</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">check</span><span class="p">[</span><span class="mi">100001</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="p">};</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">user</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="p">}</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">user</span><span class="p">[</span><span class="n">b</span><span class="p">])</span>
			<span class="n">check</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
		<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">user</span><span class="p">[</span><span class="n">b</span><span class="p">])</span>
			<span class="n">check</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
		<span class="k">else</span><span class="p">{</span>
			<span class="n">check</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
			<span class="n">check</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">check</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
			<span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">cnt</span><span class="p">;</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="채점-결과">채점 결과</h2>
<p><img width="695" alt="스크린샷 2023-06-12 16 58 58" src="https://github.com/ihmmaru99/Softeer/assets/109266664/d4dde186-2e85-4f81-a70c-9cfebe70d919" /></p>]]></content><author><name>임정빈</name></author><category term="Softeer" /><category term="Algorithm" /><category term="C++" /><category term="Implementation" /><summary type="html"><![CDATA[우물 안 개구리]]></summary></entry><entry><title type="html">[소프티어] 강의실 배정</title><link href="http://localhost:4000/softeer/%EA%B0%95%EC%9D%98%EC%8B%A4%EB%B0%B0%EC%A0%95/" rel="alternate" type="text/html" title="[소프티어] 강의실 배정" /><published>2023-06-12T00:00:00+09:00</published><updated>2023-06-12T00:00:00+09:00</updated><id>http://localhost:4000/softeer/%EA%B0%95%EC%9D%98%EC%8B%A4%EB%B0%B0%EC%A0%95</id><content type="html" xml:base="http://localhost:4000/softeer/%EA%B0%95%EC%9D%98%EC%8B%A4%EB%B0%B0%EC%A0%95/"><![CDATA[<h1 id="강의실-배정">강의실 배정</h1>

<h2 id="난이도">난이도</h2>
<blockquote>
  <p>level 3</p>
</blockquote>

<h2 id="문제">문제</h2>
<p>김교수는 강의실 1개에 최대한 많은 강의를 배정하려고 한다. 배정된 강의는 서로 겹치지 않아야 하며 수업시간의 길이와 상관없이 최대한 강의를 많이 배정하라. 단, 두 강의의 시작시간과 종료시간은 겹쳐도 된다.</p>

<h2 id="제약조건">제약조건</h2>
<p>1 ≤ N ≤ \(10^6\) 인 정수<br />
1 ≤ \(S_i\) ＜ \(F_i\) ≤ \(10^9\)</p>

<h2 id="입력형식">입력형식</h2>
<p>첫 번째 줄에 강의 개수 N이 주어진다. i + 1 (1 ≤ i ≤ N)번째 줄에는 i번째 강의의 시작 시간 Si와 종료 시간 Fi가 주어진다.</p>

<h2 id="출력형식">출력형식</h2>
<p>첫 번째 줄에 최대 강의 수를 출력하라.</p>

<h2 id="풀이">풀이</h2>

<h2 id="결과">결과</h2>
<p><a href="https://github.com/ihmmaru99/Softeer/blob/main/강의실배정/강의실배정.cpp">강의실배정</a></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">v</span><span class="p">;</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
		<span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">));</span>
	<span class="p">}</span>
	<span class="n">sort</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
	<span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">first</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span> <span class="o">&gt;=</span> <span class="n">start</span><span class="p">){</span>
			<span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
			<span class="n">start</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">cnt</span><span class="p">;</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="채점-결과">채점 결과</h2>
<p><img width="695" alt="스크린샷 2023-06-12 14 38 58" src="https://github.com/ihmmaru99/Softeer/assets/109266664/686cfc5d-7b78-41c0-aabf-aace92a1048e" /></p>]]></content><author><name>임정빈</name></author><category term="Softeer" /><category term="Algorithm" /><category term="C++" /><category term="Greedy" /><summary type="html"><![CDATA[강의실 배정]]></summary></entry><entry><title type="html">[백준][20157] 화살을 쏘자!</title><link href="http://localhost:4000/boj/20157/" rel="alternate" type="text/html" title="[백준][20157] 화살을 쏘자!" /><published>2023-06-11T00:00:00+09:00</published><updated>2023-06-11T00:00:00+09:00</updated><id>http://localhost:4000/boj/20157</id><content type="html" xml:base="http://localhost:4000/boj/20157/"><![CDATA[<h1 id="화살을-쏘자">화살을 쏘자!</h1>
<h2 id="난이도">난이도</h2>
<blockquote>
  <p><img src="https://github.com/ihmmaru99/BOJ/assets/109266664/96cb338c-cf4e-498c-9ae4-c9632a0b73f4" alt="11" width="20px&quot;, height=&quot;20px" /> <span style="color:#FFBF00"> 골드 5</span></p>
</blockquote>

<h2 id="문제">문제</h2>
<p>호준이는 요즘 활 쏘기에 푹 빠져 있다. 열심히 활 쏘기를 연습하던 호준이는 쏠 때 마다 10점이 나오는 경지에 이르렀다. 이렇다 보니 한 방향으로 있는 과녁에 쏘는 것에 실증을 느낀 호준이는 새로운 방식의 활 쏘기를 시도해 보기로 하였다.</p>

<p>화살이 꽂힌 위치에 따라 점수를 얻는 기존의 방식과 다르게 2차원의 넓은 공터에 풍선을 (x, y)지점에 설치해 두고 지정된 위치 (0, 0) 에서 원하는 방향으로 화살을 쏜다. 화살은 진행 방향으로 무한히 뻗어 나갈 수 있으며, 이 화살이 날아가며 터트린 풍선의 수만큼 점수를 얻기로 했다. 풍선 한 개당 점수는 1점으로 동일하고 같은 위치에 2개 이상의 풍선을 둘 수 없다. 또한 호준이가 서있는 (0, 0)에도 풍선을 둘 수 없다.</p>

<p>호준이는 신중하게 방향을 설정해 한발을 쐈고, 자신이 선택하여 쏜 방향이 최선의 방향인지 궁금해진 호준이는 화살 하나로 얻을 수 있는 최대 점수가 궁금해졌다. 활쏘기 연습하느라 바쁜 호준이를 대신해서 풍선의 위치가 주어진다면 화살 한 개를 쏘아 얻을 수 있는 가장 높은 점수를 알려주자.</p>
<h2 id="입력">입력</h2>
<p>첫번째 줄에 풍선의 개수 정수 N(1 ≤ N  ≤ 100,000)이 주어진다.</p>

<p>다음 N개의 줄에는 풍선의 위치인 두 정수 x, y (-1,000,000 ≤ x, y ≤ 1,000,000)가 주어진다.</p>

<h2 id="출력">출력</h2>
<p>첫번째 줄에 화살 한 개를 쏘아 얻을 수 있는 최대 점수를 구해 출력한다.</p>

<h2 id="풀이">풀이</h2>
<blockquote>
  <p>같은 기울기 상에 있는 점들을 센 다음 각 기울기에 포함되는 점의 개수가 가장 큰 경우의 개수를 출력하면 된다. 그런데 이런 기울기를 단순히 분수로 표현하면 문제가 발생할 수 있다. c++에서 표현할 수 있는 소수점의 끝까지 표현하게 되었을 때 같다면 다르더라도 같은 값으로 표현할 수 있기 때문이다. 유한소수와 무한소수가 같다고 표현될 수 있기 때문에 이런 경우를 방지하기 위해서 각 점의 기울기를 나타날 수 있는 x,y 값을 서로소 관계로 표현해서 저장해서 개수를 세도록 했다.</p>
</blockquote>

<h2 id="결과">결과</h2>
<p><a href="https://github.com/ihmmaru99/BOJ/blob/main/20157/20157.cpp">20157 - 화살을 쏘자!</a></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;map&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">map</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">v</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">check</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">){</span>
    <span class="k">while</span><span class="p">(</span><span class="n">y</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">x</span> <span class="o">%</span> <span class="n">y</span><span class="p">;</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="kt">long</span> <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">y</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">check</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">);</span>
        <span class="n">l</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">l</span><span class="p">);</span>
        <span class="n">m</span><span class="p">.</span><span class="n">insert</span><span class="p">({</span><span class="n">make_pair</span><span class="p">(</span><span class="n">y</span><span class="o">/</span><span class="n">l</span><span class="p">,</span> <span class="n">x</span><span class="o">/</span><span class="n">l</span><span class="p">),</span> <span class="n">m</span><span class="p">[</span><span class="n">make_pair</span><span class="p">(</span><span class="n">y</span><span class="o">/</span><span class="n">l</span><span class="p">,</span> <span class="n">x</span><span class="o">/</span><span class="n">l</span><span class="p">)]</span><span class="o">++</span><span class="p">});</span>
        <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">y</span><span class="o">/</span><span class="n">l</span><span class="p">,</span> <span class="n">x</span><span class="o">/</span><span class="n">l</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">cnt</span><span class="p">,</span> <span class="n">m</span><span class="p">[</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]]);</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">cnt</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="채점-결과">채점 결과</h2>
<p><img width="730" alt="스크린샷 2023-06-11 12 21 50" src="https://github.com/devxb/JJUNalgo/assets/109266664/6ae39921-8570-4ef2-a1e9-5d2a646974b4" /></p>]]></content><author><name>임정빈</name></author><category term="BOJ" /><category term="Algorithm" /><category term="C++" /><category term="Geometry" /><summary type="html"><![CDATA[화살을 쏘자! 난이도 골드 5]]></summary></entry><entry><title type="html">[백준][2527] 직사각형</title><link href="http://localhost:4000/boj/2527/" rel="alternate" type="text/html" title="[백준][2527] 직사각형" /><published>2023-06-10T00:00:00+09:00</published><updated>2023-06-10T00:00:00+09:00</updated><id>http://localhost:4000/boj/2527</id><content type="html" xml:base="http://localhost:4000/boj/2527/"><![CDATA[<h1 id="직사각형">직사각형</h1>
<h2 id="난이도">난이도</h2>
<blockquote>
  <p><img src="https://github.com/ihmmaru99/ihmmaru99.github.io/assets/109266664/1725e8ac-be34-44d1-a4db-174d0a2cd0dd" alt="10" width="20px&quot;, height=&quot;20px" /> <span style="color:#585858"> 실버 1</span></p>
</blockquote>

<h2 id="문제">문제</h2>
<p>2차원 격자공간에 두 개의 꼭짓점 좌표로 표현되는 직사각형이 있다. 직사각형은 아래와 같이 왼쪽 아래 꼭짓점 좌표 (x, y)와 오른쪽 위 꼭짓점 좌표 (p, q)로 주어진다.<br />
<img src="https://github.com/ihmmaru99/BOJ/assets/109266664/97e18321-3a8c-41ea-94d9-179078e39ba7" alt="preview" /><br />
이 문제에서 모든 직사각형은 두 꼭짓점의 좌표를 나타내는 4개의 정수 x y p q 로 표현된다. 단 항상 x&lt;p, y&lt;q 이다. 예를 들어 위 그림에 제시된 직사각형이라면 아래와 같이 표현된다.</p>
<div align="center">3 2 9 8</div>
<p>두 개의 직사각형은 그 겹치는 부분의 특성에 따라 다음 4가지 경우로 분류될 수 있다.</p>

<p>먼저 두 직사각형의 겹치는 부분이 직사각형인 경우이다. 아래 그림(a)는 공통부분이 직사각형인 경우의 3가지 예를 보여준다,<br />
<img src="https://github.com/ihmmaru99/BOJ/assets/109266664/9a6d319e-a350-4b45-aa00-4d4115903b4e" alt="preview-2" /><br />
또는 겹치는 부분이 아래 그림 (b)와 같이 선분이 될 수도 있고, 그림 (c)와 같이 점도 될 수 있다.<br />
<img src="https://github.com/ihmmaru99/BOJ/assets/109266664/867eb982-ed9d-4c09-81dc-cc03e7819363" alt="preview-3" /><br />
마지막으로 아래 그림 (d)와 같이 공통부분 없이 두 직사각형이 완전히 분리된 경우도 있다.<br />
<img src="https://github.com/ihmmaru99/BOJ/assets/109266664/43d41fe8-136d-4eee-8058-a5a32ac73842" alt="preview-4" /><br />
여러분은 두 직사각형의 겹치는 부분이 직사각형인지, 선분인지, 점인지, 아니면 전혀 없는 지를 판별해서 해당되는 코드 문자를 출력해야 한다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">공통부분의 특성</th>
      <th style="text-align: center">코드 문자</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">직사각형</td>
      <td style="text-align: center">a</td>
    </tr>
    <tr>
      <td style="text-align: center">선분</td>
      <td style="text-align: center">b</td>
    </tr>
    <tr>
      <td style="text-align: center">점</td>
      <td style="text-align: center">c</td>
    </tr>
    <tr>
      <td style="text-align: center">공통부분이 없음</td>
      <td style="text-align: center">d</td>
    </tr>
  </tbody>
</table>

<h2 id="입력">입력</h2>
<p>4개의 줄로 이루어져 있다. 각 줄에는 8개의 정수가 하나의 공백을 두고 나타나는데, 첫 4개의 정수는 첫 번째 직사각형을, 나머지 4개의 정수는 두 번째 직사각형을 각각 나타낸다. 단 입력 직사각형의 좌표 값은 1이상 50,000 이하의 정수로 제한된다.</p>

<h2 id="출력">출력</h2>
<p>4개의 각 줄에 주어진 두 직사각형의 공통부분을 조사해서 해당하는 코드 문자를 출력파일의 첫 4개의 줄에 각각 차례대로 출력해야 한다.</p>

<h2 id="풀이">풀이</h2>
<blockquote>
  <p>겹치는 부분에 대해서 값을 찾아야 한다. 겹치는 부분의 상하좌우를 뽑아낸 다음에 x,y로 겹치는 부분이 모두 양수로 나온다면 해당 부분은 직사각형으로 겹치는 것일 것이라고 생각하면 된다. 둘이 겹치지 않는다면 겹치는 부분의 값이 음수로 나올 것이고 한 점에서 만나면 값이 0이 나올 것이다. 이를 구현하면 된다.</p>
</blockquote>

<h2 id="결과">결과</h2>
<p><a href="https://github.com/ihmmaru99/BOJ/blob/main/2527/2527.cpp">2527 - 직사각형</a></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">x1_s</span><span class="p">,</span> <span class="n">y1_s</span><span class="p">,</span> <span class="n">x1_e</span><span class="p">,</span> <span class="n">y1_e</span><span class="p">,</span> <span class="n">x2_s</span><span class="p">,</span> <span class="n">y2_s</span><span class="p">,</span> <span class="n">x2_e</span><span class="p">,</span> <span class="n">y2_e</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">xr</span><span class="p">,</span> <span class="n">xl</span><span class="p">,</span> <span class="n">yt</span><span class="p">,</span> <span class="n">yb</span><span class="p">,</span> <span class="n">xd</span><span class="p">,</span> <span class="n">yd</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x1_s</span> <span class="o">&gt;&gt;</span> <span class="n">y1_s</span> <span class="o">&gt;&gt;</span> <span class="n">x1_e</span> <span class="o">&gt;&gt;</span> <span class="n">y1_e</span> <span class="o">&gt;&gt;</span> <span class="n">x2_s</span> <span class="o">&gt;&gt;</span> <span class="n">y2_s</span> <span class="o">&gt;&gt;</span> <span class="n">x2_e</span> <span class="o">&gt;&gt;</span> <span class="n">y2_e</span><span class="p">;</span>
        <span class="n">xr</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">x1_e</span><span class="p">,</span> <span class="n">x2_e</span><span class="p">);</span>
        <span class="n">xl</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">x1_s</span><span class="p">,</span> <span class="n">x2_s</span><span class="p">);</span>
        <span class="n">yt</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">y1_e</span><span class="p">,</span> <span class="n">y2_e</span><span class="p">);</span>
        <span class="n">yb</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">y1_s</span><span class="p">,</span> <span class="n">y2_s</span><span class="p">);</span>

        <span class="n">xd</span> <span class="o">=</span> <span class="n">xr</span> <span class="o">-</span> <span class="n">xl</span><span class="p">;</span>
        <span class="n">yd</span> <span class="o">=</span> <span class="n">yt</span> <span class="o">-</span> <span class="n">yb</span><span class="p">;</span>

        <span class="k">if</span><span class="p">(</span><span class="n">xd</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">yd</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'a'</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">xd</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">yd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'d'</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">xd</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">yd</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'c'</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'b'</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="채점-결과">채점 결과</h2>
<p><img width="730" alt="스크린샷 2023-06-13 11 24 11" src="https://github.com/ihmmaru99/BOJ/assets/109266664/12c90dc1-2a34-4a63-958e-911ef2460762" /></p>]]></content><author><name>임정빈</name></author><category term="BOJ" /><category term="Algorithm" /><category term="C++" /><category term="Geometry" /><summary type="html"><![CDATA[직사각형 난이도 실버 1]]></summary></entry><entry><title type="html">[백준][2293] 동전1</title><link href="http://localhost:4000/boj/2293/" rel="alternate" type="text/html" title="[백준][2293] 동전1" /><published>2023-06-09T00:00:00+09:00</published><updated>2023-06-09T00:00:00+09:00</updated><id>http://localhost:4000/boj/2293</id><content type="html" xml:base="http://localhost:4000/boj/2293/"><![CDATA[<h1 id="동전-1">동전 1</h1>
<h2 id="난이도">난이도</h2>
<blockquote>
  <p><img src="https://github.com/ihmmaru99/BOJ/assets/109266664/96cb338c-cf4e-498c-9ae4-c9632a0b73f4" alt="11" width="20px&quot;, height=&quot;20px" /> <span style="color:#FFBF00"> 골드 5</span></p>
</blockquote>

<h2 id="문제">문제</h2>
<p>n가지 종류의 동전이 있다. 각각의 동전이 나타내는 가치는 다르다. 이 동전을 적당히 사용해서, 그 가치의 합이 k원이 되도록 하고 싶다. 그 경우의 수를 구하시오. 각각의 동전은 몇 개라도 사용할 수 있다.</p>

<p>사용한 동전의 구성이 같은데, 순서만 다른 것은 같은 경우이다.</p>

<h2 id="입력">입력</h2>
<p>첫째 줄에 n, k가 주어진다. (1 ≤ n ≤ 100, 1 ≤ k ≤ 10,000) 다음 n개의 줄에는 각각의 동전의 가치가 주어진다. 동전의 가치는 100,000보다 작거나 같은 자연수이다.</p>

<h2 id="출력">출력</h2>
<p>첫째 줄에 경우의 수를 출력한다. 경우의 수는 \(2^{31}\)보다 작다.</p>

<h2 id="풀이">풀이</h2>
<blockquote>
  <p>입력된 동전을 통해서 가능한 경우의 수를 모두 더해서 DP를 활용하면 된다. 1,2,5의 동전이 있다면 1만으로 10을 만드는 경우는 각각 1가지이다. 여기서 2를 더하면 1을 제외하고 각각의 경우에서 경우가 추가로 생기는 것을 알 수 있다. 2를 만드는 방법은 2개, 3을 만드는 방법은 2개, 4를 만드는 방법은 2+2,1+2+1, 1+1+1+1로 총 3개인데 기존에 1+1+1+1의 방법에서 2를 만드는 방법 2개가 추가되어서 3개가 된 것이다. dp[i] + dp[i-2]를 해주는 것과 같다. 다음 식을 일반화해서 문제를 해결하면 된다.</p>
</blockquote>

<h2 id="결과">결과</h2>
<p><a href="https://github.com/ihmmaru99/BOJ/blob/main/2293/2293.cpp">2293 - 동전1</a></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">dp</span><span class="p">[</span><span class="mi">10001</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="p">};</span>
<span class="kt">int</span> <span class="n">num</span><span class="p">[</span><span class="mi">101</span><span class="p">];</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">k</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">j</span><span class="o">&lt;=</span><span class="n">k</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">dp</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="채점-결과">채점 결과</h2>
<p><img width="730" alt="스크린샷 2023-06-09 14 10 09" src="https://github.com/ihmmaru99/BOJ/assets/109266664/92786188-a19d-4085-b4ea-4155e467c3d9" /></p>]]></content><author><name>임정빈</name></author><category term="BOJ" /><category term="Algorithm" /><category term="C++" /><category term="DP" /><summary type="html"><![CDATA[동전 1 난이도 골드 5]]></summary></entry><entry><title type="html">[백준][1715] 카드 정렬하기</title><link href="http://localhost:4000/boj/1715/" rel="alternate" type="text/html" title="[백준][1715] 카드 정렬하기" /><published>2023-06-09T00:00:00+09:00</published><updated>2023-06-10T00:00:00+09:00</updated><id>http://localhost:4000/boj/1715</id><content type="html" xml:base="http://localhost:4000/boj/1715/"><![CDATA[<h1 id="카드-정렬하기">카드 정렬하기</h1>
<h2 id="난이도">난이도</h2>
<blockquote>
  <p><img src="https://github.com/ihmmaru99/ihmmaru99/assets/109266664/4f74cb65-a628-44e0-8f7f-210cdc98eb6e" alt="12" width="20px&quot;, height=&quot;20px" /> <span style="color:#FFBF00"> 골드 4</span></p>
</blockquote>

<h2 id="문제">문제</h2>
<p>정렬된 두 묶음의 숫자 카드가 있다고 하자. 각 묶음의 카드의 수를 A, B라 하면 보통 두 묶음을 합쳐서 하나로 만드는 데에는 A+B 번의 비교를 해야 한다. 이를테면, 20장의 숫자 카드 묶음과 30장의 숫자 카드 묶음을 합치려면 50번의 비교가 필요하다.</p>

<p>매우 많은 숫자 카드 묶음이 책상 위에 놓여 있다. 이들을 두 묶음씩 골라 서로 합쳐나간다면, 고르는 순서에 따라서 비교 횟수가 매우 달라진다. 예를 들어 10장, 20장, 40장의 묶음이 있다면 10장과 20장을 합친 뒤, 합친 30장 묶음과 40장을 합친다면 (10 + 20) + (30 + 40) = 100번의 비교가 필요하다. 그러나 10장과 40장을 합친 뒤, 합친 50장 묶음과 20장을 합친다면 (10 + 40) + (50 + 20) = 120 번의 비교가 필요하므로 덜 효율적인 방법이다.</p>

<p>N개의 숫자 카드 묶음의 각각의 크기가 주어질 때, 최소한 몇 번의 비교가 필요한지를 구하는 프로그램을 작성하시오.</p>

<h2 id="입력">입력</h2>
<p>첫째 줄에 N이 주어진다. (1 ≤ N ≤ 100,000) 이어서 N개의 줄에 걸쳐 숫자 카드 묶음의 각각의 크기가 주어진다. 숫자 카드 묶음의 크기는 1,000보다 작거나 같은 양의 정수이다.</p>

<h2 id="출력">출력</h2>
<p>첫째 줄에 최소 비교 횟수를 출력한다.</p>

<h2 id="풀이">풀이</h2>
<blockquote>
  <p>문제에서 작은 묶음을 먼저 묶으면서 진행하면 최선의 결과로 최소 비교 횟수를 얻을 수 있다. 이를 구현하기 위해서 우선순위 큐를 이용해서 구현한다. 우선순위 큐를 오름차순으로 받을 수 있도록 해서 계속해서 가장 작은 것을 먼저 합치도록 하면 된다.</p>
</blockquote>

<h2 id="결과">결과</h2>
<p><a href="https://github.com/ihmmaru99/BOJ/blob/main/1715/1715.cpp">1715 - 카드 정렬하기</a></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">priority_queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">greater</span><span class="o">&lt;&gt;&gt;</span> <span class="n">pq</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">num</span><span class="p">;</span>
        <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">while</span><span class="p">(</span><span class="n">pq</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
        <span class="n">pq</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
        <span class="n">pq</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span>
        <span class="n">cnt</span> <span class="o">+=</span> <span class="n">sum</span><span class="p">;</span>
        <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">sum</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">cnt</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="채점-결과">채점 결과</h2>
<p><img width="730" alt="스크린샷 2023-06-10 14 27 21" src="https://github.com/ihmmaru99/BOJ/assets/109266664/82b78ea7-fb86-4aeb-b137-58c4a6ee8996" /></p>]]></content><author><name>임정빈</name></author><category term="BOJ" /><category term="Algorithm" /><category term="C++" /><category term="Greedy" /><category term="Queue" /><summary type="html"><![CDATA[카드 정렬하기 난이도 골드 4]]></summary></entry></feed>